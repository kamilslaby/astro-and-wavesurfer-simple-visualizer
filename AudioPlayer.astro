---
// WaveformPlayer.astro
export interface Props {
  audioSrc: string;
  progressColor?: string;
  waveColor?: string;
  height?: number;
  barWidth?: number;
  barGap?: number;
}

const { 
  audioSrc, 
  progressColor = "#ff0000", 
  waveColor = "#ddd",
  height = 32 ,
  barWidth = 2,
  barGap = 0.1
} = Astro.props;

// Generate unique ID for this component instance
const componentId = `waveform-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="waveform-container">
  <div class="waveform-row">
    <button id={`play-${componentId}`} class="play-btn">
      <span class="play-icon">▶</span>
      <span class="pause-icon" style="display: none;">⏸</span>
    </button>
    <div id={componentId} class="waveform"></div>
  </div>
</div>

<style>
  .waveform-container {
    width: 100%;
    background: transparent;
  }

  .waveform-row {
    display: flex;
    align-items: center;
    gap: 15px;
  }

  .waveform {
    flex: 1;
  }

  .play-btn {
    background: transparent;
    color: white;
    border: none;
    width: 40px;
    height: 40px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
    transition: opacity 0.2s;
    flex-shrink: 0;
  }

  .play-btn:hover {
    opacity: 0.7;
  }

  .play-icon, .pause-icon {
    color: white;
  }
</style>

<script define:vars={{ 
  componentId, 
  audioSrc, 
  progressColor, 
  waveColor, 
  height,
  barWidth,
  barGap
}}>
  // Global player manager to ensure only one player plays at a time
  if (!window.waveformPlayerManager) {
    window.waveformPlayerManager = {
      currentPlayer: null,
      players: new Map(),
      
      register(id, wavesurfer) {
        this.players.set(id, wavesurfer);
      },
      
      play(id) {
        // Stop currently playing player if it's different
        if (this.currentPlayer && this.currentPlayer !== id) {
          const currentWavesurfer = this.players.get(this.currentPlayer);
          if (currentWavesurfer && currentWavesurfer.isPlaying()) {
            currentWavesurfer.pause();
          }
        }
        this.currentPlayer = id;
      },
      
      pause(id) {
        if (this.currentPlayer === id) {
          this.currentPlayer = null;
        }
      }
    };
  }

  // Wait for WaveSurfer to be available
  function initWaveform() {
    if (typeof WaveSurfer === 'undefined') {
      // Load WaveSurfer from CDN if not already loaded
      const script = document.createElement('script');
      script.src = 'https://unpkg.com/wavesurfer.js@7/dist/wavesurfer.esm.js';
      script.type = 'module';
      script.onload = () => {
        // After loading, import and initialize
        import('https://unpkg.com/wavesurfer.js@7/dist/wavesurfer.esm.js').then(({ default: WaveSurfer }) => {
          setupWaveSurfer(WaveSurfer);
        });
      };
      document.head.appendChild(script);
    } else {
      setupWaveSurfer(WaveSurfer);
    }
  }

  function setupWaveSurfer(WaveSurfer) {
    const container = document.getElementById(componentId);
    const playBtn = document.getElementById(`play-${componentId}`);
    const playIcon = playBtn.querySelector('.play-icon');
    const pauseIcon = playBtn.querySelector('.pause-icon');

    if (!container) return;

    // Create WaveSurfer instance
    const wavesurfer = WaveSurfer.create({
      container: container,
      waveColor: waveColor,
      progressColor: progressColor,
      height: height,
      barWidth: barWidth,
      barGap: barGap,
      responsive: true,
      backend: 'WebAudio',
      mediaControls: false
    });

    // Load audio
    wavesurfer.load(audioSrc);

    // Register this player with the global manager
    window.waveformPlayerManager.register(componentId, wavesurfer);

    // Event listeners
    wavesurfer.on('play', () => {
      playIcon.style.display = 'none';
      pauseIcon.style.display = 'inline';
      // Notify manager that this player is playing
      window.waveformPlayerManager.play(componentId);
    });

    wavesurfer.on('pause', () => {
      playIcon.style.display = 'inline';
      pauseIcon.style.display = 'none';
      // Notify manager that this player is paused
      window.waveformPlayerManager.pause(componentId);
    });

    wavesurfer.on('finish', () => {
      playIcon.style.display = 'inline';
      pauseIcon.style.display = 'none';
      // Notify manager that this player finished
      window.waveformPlayerManager.pause(componentId);
    });

    // Play/pause button
    playBtn.addEventListener('click', () => {
      if (wavesurfer.isPlaying()) {
        wavesurfer.pause();
      } else {
        // This will trigger the play event which will handle stopping other players
        wavesurfer.play();
      }
    });

    // Click on waveform to seek
    wavesurfer.on('click', (progress) => {
      wavesurfer.seekTo(progress);
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initWaveform);
  } else {
    initWaveform();
  }
</script>